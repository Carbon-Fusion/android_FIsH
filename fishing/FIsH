#####################################################################################################
#
# This is Android FIsH: [F]luffy [I]ncredible [s]teadfasterX [H]ijack
#
# Copyright (C) 2017 steadfasterX <steadfastX@boun.cr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
######################################################################################################


#################################################################################################
# STOP HERE. No need to continue ;-) you only have to modify the FIsH.vars!!
#################################################################################################


#################################################################################################
########### NOW CODE ONLY #######################################################################
#################################################################################################

# do not touch this. If those files are missing check callmeFIsH first!
TMPFISHDIR=/res/fish

PID=$$
FISHME=$TMPFISHDIR/FIsH.me
FISHPORT=$TMPFISHDIR/FIsH.porting

[ ! -f $FISHME ] && echo "ERROR missing FIsH.me" && exit 3
[ ! -f $FISHPORT ] && echo "ERROR missing FIsH.porting" && exit 3
source $FISHME
source $FISHPORT

# initialize commands
CMD_SETUP

${MOUNT} -o remount,rw rootfs /	
echo "${_DT} - $0 loaded" >> /$LOGFILE

# get version details
AVER=$(getprop ro.build.version.release| tr -d '\r')
AREL=$(getprop ro.com.google.gmsversion| tr -d '\r')
ABUILD=$(getprop ro.build.date| tr -d '\r')
AFP=$(getprop ro.build.fingerprint| tr -d '\r')
ASDK=$(getprop ro.build.version.sdk| tr -d '\r')
SUVER=$(su -v|cut -d ":" -f1 |tr -d '.'| tr -d '\r')
FFVER=$($CAT ${BTMGRPATH}/fishfood.release)

echo "${_DT} - Detected versions:" >> $LOGFILE
echo -e "\tFIsH: $FISHVER" >> $LOGFILE
echo -e "\tFIsHFOOD: $FFVER" >> $LOGFILE
echo -e "\tAndroid: $AVER" >> $LOGFILE
echo -e "\tRelease level: $AREL" >> $LOGFILE
echo -e "\tBuild date: $ABUILD" >> $LOGFILE
echo -e "\tFingerprint: $AFP" >> $LOGFILE
echo -e "\tSDK Level: $ASDK" >> $LOGFILE
echo -e "\tSU version: $SUVER" >> $LOGFILE

# this requires a patched /system with SuperSU but is required for everything in here:
# selinux=permissive
# we will save the default selinux mode for your device to not leaving your STOCK ROM
# to permissive if u may don't want to.
SELINUXBOOT=$(getenforce |tr -d '\r')
echo "${_DT} - booted selinux mode <$(getenforce)>" >> /$LOGFILE
setenforce 0
echo "${_DT} - selinux is now: <$(getenforce)>" >> /$LOGFILE

# turn off the lights
echo "0" > ${FISH_LED}
echo "0" > ${BOOT_LED}
echo "0" > ${WAIT_LED}

# Turn on WAIT-led -> NOW the user should press the key combo - until he feels the vibrate and red led!
echo "255" > ${WAIT_LED}
$SLEEP $KEYWAIT
    
# for debugging..
$DMESG > ${LOGPATH}/dmesg.log

# trigger vibration so user can release buttons now!
echo '200' > $VIBRATE

$PS -T -o pid,comm,args > ${LOGPATH}/ps.log
${CHMOD} 660 ${LOGPATH}/ps.log

# check FIsH flag
[ -f /cache/recovery/boot ] && FISH_FLAG=true

# see if we want to start FIsH or not
if [ "$FISH_FLAG" == "true" ];then
    ECHOL "### Enforcing FIsH boot mode by boot flag file.."
    RAMDISK="$FISHFOOD"
else
    # check for the magic key press
    F_KEYPRESS
    KEYRET="$?"
    if [ "$KEYRET" -eq 1 ];then
        ECHOL "### FIsH boot mode by key press..."
        RAMDISK="$FISHFOOD"
    else
        # boot normally
        RAMDISK=""
    fi
fi

# Boot FIsH food if it exists
EXECL cd /
if [ -f ${BTMGRPATH}/${RAMDISK} ];then
    ECHOL "### ${RAMDISK} exists..."

    ECHOL "Your FIsHFOOD is: $($CAT ${BTMGRPATH}/fishfood.release)" >> $LOGFILE

    # removing flag to start FIsH
    if [ -f /cache/recovery/boot ]; then
        EXECL ${RM} /cache/recovery/boot
    fi

    # notify that we will be able to boot the FOOD because the desired ramdisk exists
    echo "0" > ${WAIT_LED}
    echo "255" > ${FISH_LED}
    ${SLEEP} 1

    ECHOL "### Checking device model..."
    MODEL=$(getprop ro.product.model)
    VERSION=$(getprop ro.product.name)
    MODEL2=$(getprop ro.build.product)
    ECHOL "Model found: $MODEL / $MODEL2 ($VERSION)"
    
    # remount rootfs to rw.
    ECHOL "### remount rootfs to rw..."
    EXECL ${MOUNT} -o remount,rw rootfs /	

    # Install exfat module to support exfat file system
	ECHOL "### Install exfat module..."
    LIBP=/system/lib/modules
    EXECL lsmod |grep fat
    if [ $? -ne 0 ];then
        if [ "$LIBP/exfatfs.ko" ];then
            EXECL insmod $LIBP/exfatfs.ko
        else
            [ "$LIBP/texfat.ko" ]&& EXECL insmod $LIBP/texfat.ko
        fi
    else
        ECHOL "### Skipped exfat module (already loaded)..."
    fi

    # Stop init services.
    ECHOL "### stop init services..."
    ECHOL "All service states before:"
    getprop | ${GREP} -E '^\[init\.svc\..*\]:' >> $LOGFILE

    ECHOL "Excluded services: $EXCLUDESERVICES"    

    for SVCRUNNING in $(getprop | ${GREP} -E '^\[init\.svc\..*\]: \[running\]' | ${EGREP} -v "($EXCLUDESERVICES)")
        do
        # set counter
        CNT=0
    	SVCNAME=$(${EXPR} ${SVCRUNNING} : '\[init\.svc\.\(.*\)\]:.*')
        # try to stop a service it up to 3 times (we cannot get a valid service error state so this way..)
        while [ $CNT -lt 3 ];do
            if [ ! -z "$SVCNAME" ];then
                EXECL stop ${SVCNAME}
                CNT=$((CNT +1))
                ECHOL "increased counter for $SVCNAME to $CNT"
            else
                # break out
                CNT=99
            fi
        done
    done
        
    ECHOL "All service states after:"
    getprop | ${GREP} -E '^\[init\.svc\..*\]:' >> $LOGFILE

    # Kill remaining processes under /system/bin
    ECHOL "### Kill /system/bin and /system/xbin processes (ps based)..."
    ${PS} | e${GREP} '(/system/bin|/system/xbin)' >> $LOGFILE
    for RUNNINGPRC in $(${PS} | e${GREP} '(/system/bin|/system/xbin)' | ${GREP} -v grep | ${GREP} -v $0 | ${AWK} '{print $1}' )
    do
    	EXECL ${KILL} -9 ${RUNNINGPRC}
    done
    
    ECHOL "### Kill /system/bin and /system/xbin processes (lsof based)..."
    $LSOF | e${GREP} '(/system/bin|/system/xbin)' >> $LOGFILE
    for RUNNINGPRC in $(${LSOF} | e${GREP} '(/system/bin|/system/xbin)' | ${GREP} -v grep | ${GREP} -v $0 | ${AWK} '{print $1}' )
    do
    	EXECL ${KILL} -9 ${RUNNINGPRC}
    done

    # Kill remaining processes under /sbin
    ECHOL "### Kill /sbin processes..."
    $PS -T -o pid,comm,args |  ${GREP} /sbin >> $LOGFILE
    for RUNNINGPRC in $(${PS} | ${GREP} /sbin | ${GREP} -v grep | $AWK '{print $1}' )
    do
    	EXECL ${KILL} -9 ${RUNNINGPRC}
    done

    # MOVED to CALLMEFISH
    ### Moving Busybox to /res
    #ECHOL "### moving busybox.."
    #EXECL ${RM} -rf /res
    #EXECL ${MKDIR} /res 
    #EXECL ${CHOWN} 0.0 /res
    #EXECL ${CHMOD} 0777 /res
    #EXECL ${CP} ${BUSYBOX} /res
    #BUSYBOX="$TMPFISHDIR/busybox"
    # Setup busybox commands to the new path 
    #CMD_SETUP
    
    ## Move and decompress ramdisk to /res
    #ECHOL "### moving ${RAMDISK}..."
    #EXECL ${CP} ${BTMGRPATH}/${RAMDISK} /res
    ECHOL "### decompress ${RAMDISK}..."
    EXECL ${GZIP} -d $TMPFISHDIR/${RAMDISK}
    $LS -la $TMPFISHDIR >> $LOGFILE
    
    ##################################################################
    #
    ECHOL " ### NOW IT GET SERIOUS! LEAN BACK AND ENJOY THE FIsH!"
    #
    ##################################################################

    echo "\n\n ***** inotifies before we killing the wale ***** \n" >> $LOGFILE    
    $PS $($FIND /proc/*/fd/* -type l -lname 'anon_inode:inotify' -print 2> /dev/null | $SED -e 's/^\/proc\/\([0-9]*\)\/.*/\1/')  >> $LOGFILE    
    lsmod >> $LOGFILE
    $BUSYBOX lsmod >> $LOGFILE

    # umount partitions, stripping the ramdisk to bare metal
    ECHOL " ### Unmounting partitions but before: here all current mounts"
    $MOUNT >> $LOGFILE
    
    #in order to completely remove them later we remount them rw before
    #for i in $($MOUNT |$GREP 'ro,'|grep -v remount-ro |$SED 's/ /|/g' | cut -d '|' -f3);do
    #    ECHOL "### Remounting $i RW"
    #    EXECL $MOUNT -oremount,rw $i
    #done
    EXECL $MOUNT -oremount,rw /system
    
    ECHOL " # Generating pid exclusion list based on EXCLUDEPROCS..."
    # create list of excluded PIDs based on given names
    unset FILTERPIDS
    NAMEMAP=$(F_PS |$EGREP "$EXCLUDEPROCS" |cut -d ":" -f1 | $TR "\n" "|" |sed 's/||//g;s/|$//g'|$SORT -u)
    ECHOL "based on >$EXCLUDEPROCS< these pid(s) were found: <$NAMEMAP>"
    [ ! -z "$NAMEMAP" ]&& FILTERPIDS="$NAMEMAP"

    #DEBUG: 
    #ECHOL "These pids of PROCESS NAMES get excluded from being killed <$FILTERPIDS> as defined in EXCLUDEPROCS ($EXCLUDEPROCS)"

    # if filter pids were specified add them as well
    [ ! -z "$EXCLUDEPIDS" ] && [ ! -z "$FILTERPIDS" ] && FILTERPIDS="$FILTERPIDS|$EXCLUDEPIDS|$PID"
    [ ! -z "$EXCLUDEPIDS" ] && [ -z "$FILTERPIDS" ] && FILTERPIDS="$EXCLUDEPIDS|$PID"
    
    #DEBUG:
    #ECHOL "These PIDs get excluded from being killed as defined in EXCLUDEPIDS: <$EXCLUDEPIDS>\nIn sum all these PIDs get excluded from being killed: <$FILTERPIDS> ($PID is FIsH itself ;))"

    # umount all normal mounts (no /system yet!)
    ECHOL "### killing all processes accessing defined mountpoints (if any can be found by fuser and not excluded)"
    MOUNTS=$(for mountp in $MOUNTS;do [ -e "$mountp" ] && echo $mountp ;done)
    # convert newlines in MOUNTS variable into spaces
    SPACEMNT=$($ECHO $MOUNTS)
    TOKILL=$($FUSER -m $SPACEMNT | $TR ' ' '\n' | $SORT -u | $EGREP -v "$FILTERPIDS" | $TR '\n' ' ')
    PSGREP=$($ECHO "$TOKILL" | $SED -e 's/\([0-9]*\)/^\1:|/g;s/ //g;s/||//g;s/\^:|//g;s/|$//g')
    ECHOL "$FUSER -m $SPACEMNT | $TR ' ' '\\n' | $EGREP -v '$FILTERPIDS' | $TR '\\n' ' '"

    if [ ! -z "$TOKILL" ];then
        echo "Trying to kill ($PSGREP):" >> $LOGFILE
        F_PS | $EGREP "$PSGREP" >> $LOGFILE
        $ECHO "cmd: $KILL -9 $TOKILL" >> $LOGFILE
        $KILL -9 $TOKILL >> $LOGFILE 2>&1
        #ECHOL "KILLING $PSGREP IS DISABLED"
    else
        ECHOL "Empty pid skipped..!"
    fi
    ECHOL "### unmounting all defined (and also available) partitions"
    for i in $MOUNTS;do
        if [ -e $i ];then
            EXECL ${UMOUNT} $i || EXECL ${UMOUNT} -f $i || EXECL ${UMOUNT} -l $i
        else
            ECHOL "Skipped requested unmount because it does not exist ($i)"
        fi
    done
    
    ECHOL " ### Partitions after umounting"
    $MOUNT >> /$LOGFILE

    # prevent bootloops in testing mode 
    if [ "$RUNONCE" -eq 1 ];then
        ECHOL "### RUNONCE DETECTED! WILL REMOVING FIsH FROM NEXT BOOT!!!"
        EXECL ${MOUNT} -oremount,rw /system
        EXECL ${RM} -rf /system/su.d/ $BTMGRPATH $TMPFISHDIR
    fi

    # AS OF HERE NO MORE BUSYBOX SYMLINKS IN $PATH!!!!
    ECHOL "### umounting system  ..."
    EXECL ${UMOUNT} /system || EXECL ${UMOUNT} -f /system || EXECL ${UMOUNT} -l /system
    export PATH="/sbin"
    
    # rm symlinks & files.
    ECHOL "### Remove symlinks and files in rootfs"
    for rootfile in $(${BUSYBOX} find . -maxdepth 1 \( -type l -o -type f \)|$GREP -v './init$');do
        ${RM} -fv $rootfile
    done

    # Remove some directories
    ECHOL "### Remove directories..."
    for directory in `${BUSYBOX} find . -maxdepth 1 -type d`; do
    	if [ "$directory" != "." -a "$directory" != ".." -a "$directory" != "./" -a "$directory" != "./dev" -a "$directory" != "./proc" -a "$directory" != "./sys" -a "$directory" != "./res" -a "$directory" != "./cache" ]; then
            $LS -la $directory >> $LOGFILE
    		EXECL ${RM} -vrf $directory 2>&1 
    	fi
    done

    _DT=`${BUSYBOX} date +"%F %T"`
    echo "${_DT} - Will cook the FIsH now -> ${RAMDISK} \n" >> $LOGFILE
    
    # log process before extract ramdisk
    echo -e "\n\n ***** processes before extracting ramdisk ***** \n" >> $LOGFILE
    $PS -T -o pid,comm,args >> $LOGFILE
    echo -e "\n\n ***** directories before extracting ramdisk ***** \n-e " >> $LOGFILE
    ${LS} -la >> $LOGFILE
    
    # extract the food
    ECHOL "### Extracting uncompressed ramdisk (${RAMDISK/.gz}).."
    EXECL ${CPIO} -i -u < $TMPFISHDIR/${RAMDISK/.gz}
    # busybox cpio does not support exclusions by pattern ..
    [ -d /res/food ] && EXECL $RM -rf /res/food
    #EXECL $MKDIR /res/food
    #EXECL cd /res/food
    #EXECL ${CPIO} -i -u < $TMPFISHDIR/${RAMDISK/.gz}
    #EXECL $MV /res/food/* /
    #EXECL cd /

    echo -e "\n\n ***** directory before exec init ***** \n" >> $LOGFILE 
    ${LS} -la >> $LOGFILE
    
    # TODO: validations of the above?! to avoid extraction errors etc..
    
    DATETIME=`${BUSYBOX} date +"%F %T"`
    ECHOL "########### Executing the FIsHFOOD! YOU SHOULD SMELL THE FIsH ALREADY!" 

    echo -e "\n\n ***** process before exec init ***** \n" >> $LOGFILE 
    $PS -T -o pid,comm,args >> $LOGFILE 

    echo -e "\n\n ***** lsof before exec init ***** \n" >> $LOGFILE
    ${LSOF} >> $LOGFILE

    echo -e "\n\n ***** inotifies before exec init ***** \n" >> $LOGFILE    
    $PS $($FIND /proc/*/fd/* -type l -lname 'anon_inode:inotify' -print 2> /dev/null | $SED -e 's/^\/proc\/\([0-9]*\)\/.*/\1/')  >> $LOGFILE    

    # umount all special mounts
    for i in $SPECMOUNTS;do
        EXECL ${UMOUNT} $i || EXECL ${UMOUNT} -f $i || EXECL ${UMOUNT} -l $i
    done
        
    # wait 
    ${SLEEP} 2        

    # Kill remaining processes under /sbin again just to be sure
    ECHOL "### Kill /sbin processes (again!)..."
    $PS -T -o pid,comm,args|  ${GREP} /sbin >> $LOGFILE
    for RUNNINGPRC in $(${PS} | ${GREP} /sbin | ${GREP} -v grep | $AWK '{print $1}' )
    do
    	EXECL ${KILL} -9 ${RUNNINGPRC}
    done
    
    $LSOF
    
    # turnoff LEDs
    $ECHO "0" > ${FISH_LED}
    $ECHO "0" > ${WAIT_LED}
    $ECHO "0" > ${BOOT_LED}
    
    # run
    export PATH="/sbin"
    export LD_LIBRARY_PATH=".:/sbin"
        
    # let the FISHFOOD takeover!
    #$CHROOT / /init
    if [ -x $FOODBIN ];then
        ECHOL "... now its all over ;) 1 ms before executing <$FOODBIN>! Hope u will enjoy this tasty FIsH!"
        if [ "$DEBUG" -eq 1 ];then
            ECHOL "!!!!!!!!!!! DEBUG MODE ENABLED - FIsH will commit suicide in 25 minutes !!!!!!!!!!!!"
            exec /$FOODBIN >> $LOGFILE 2>&1 \
                & ECHOL "FOODBIN executed! These are the processes now:\n*********************************************************\n$(ps)"
            ECHOL "dmesg output:\n******************************************\n$(dmesg)"
            adbd --root_seclabel=u:r:su:s0 --device_banner=recovery >>$LOGFILE 2>&1
            # adb may fail this way so we ensure FIsH will not die too fast
            $SLEEP $SUICIDETIME
            # this would also mean that even when FIsHFOOD was executed fine FIsH will be do suicide as we are in debug mode
            ECHOL "FIsH suicide initiated!!! bye bye............"
            exit 0
        else
            exec /$FOODBIN >> $LOGFILE 2>&1
        fi
    else
        ECHOL "ERROR: ABORTED!!!! FOODBIN <$FOODBIN> does not exists or is not marked executable!!"
    fi
    # reboot when an error occurs
    # well.. this may causing bootloops
    #reboot
else
        ECHOL "### RAMDISK ${RAMDISK} missing or normal boot mode!"
fi

# Show LED for normal boot
echo "0" > ${FISH_LED}
echo "0" > ${WAIT_LED}
echo "255" > ${BOOT_LED}

# set selinux to its previous state
ECHOL "Will set SELinux back to: <$SELINUXBOOT>"
EXECL setenforce $SELINUXBOOT
ECHOL "${_DT} - selinux is now: <$($BUSYBOX getenforce)>"

# remount everything RO again for a normal boot
${MOUNT} -o remount,ro rootfs /
$ECHO "${_DT} - $0 ended without booting into FIsH" >> /$LOGFILE
